21.4*.813
21.4 -21.4*.813
library(lubridaste)
library(lubrida=te)
library(lubridate)
-v
install.packages("rgeos", repos="http://R-Forge.R-project.org")#
require(rgeos)
library(rgeos)
require(rgeos)
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series')
library(ProjectTemplate)#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/analysis/PlantSize')
rmarkdown::render('stricta_SIZE_short.Rmd')
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
model_dimensions_name_processing_function <- function(y) {#
	if ("Columns in X" %in% names(y)) #
		{setnames(y, "Columns in X", "Number of Parameters")}#
	if (length(grep("Columns in Z", names(y), fixed=T)) > 0) #
		{setnames(y, names(y)[grep("Columns in Z", names(y), fixed=T)], #
		"ColumnsZ")}#
	return(y)#
	}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
Return table comparing AIC values for multiple models produced using SAS GLIMMIX.#
#' #
#' @param y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Return table comparing AIC values for multiple models produced using SAS GLIMMIX.#
#' #
#' @param y#
#
AIC_function <- function(y) {#
	`min(AIC)` = min(y$AIC)#
	y %<>%#
		mutate(#
			`delta AIC` = AIC - `min(AIC)`,#
			`Model Lik` = exp((-1/2)*`delta AIC`)#
		) %>%#
		arrange(desc(`Model Lik`))#
	sum.L = sum(y$`Model Lik`)#
	y %<>% mutate(`Prob(Model)` = `Model Lik`/sum.L)#
	y$`Prob(Model)` %<>% round(digits=2)#
	y$`Model Lik` %<>% round(digits=2)#
	return(y)#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Return table comparing conditional AIC (cAIC) values for multiple models produced using SAS GLIMMIX.#
#' @param y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Return table comparing conditional AIC (cAIC) values for multiple models produced using SAS GLIMMIX.#
#' @param y#
#
cAIC_function <- function(y) {#
	`min(cAIC)` = min(y$cAIC)#
	y %<>%#
		mutate(#
			`delta cAIC` = cAIC - `min(cAIC)`,#
			`Model Lik` = exp((-1/2)*`delta cAIC`)#
		) %>%#
		arrange(desc(`Model Lik`))#
	sum.L = sum(y$`Model Lik`)#
	y %<>% mutate(`Prob(Model)` = `Model Lik`/sum.L)#
	y$`Prob(Model)` %<>% round(digits=2)#
	y$`Model Lik` %<>% round(digits=2)#
	return(y)#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Format parameters and their estimates for a model selection table using data from SAS GLIMMIX#
#' #
#' @param y#
#
genmod_modelselection_format_parameter_estimates_function <- function(y) {	#
	y %<>% #
	dplyr::select(#
		Parameter,#
		DF,#
		Estimate,#
		StdErr,#
		LowerWaldCL,#
		UpperWaldCL,#
		ChiSq,#
		ProbChiSq#
	)#
	# change effect names#
	y[y$Parameter == "Ln_Cone_t_1_st", ]$Parameter 	<- "Standardized Cone Volume [t-1]"#
	y[y$Parameter == "Ln_Size_t_1_st", ]$Parameter 	<- "Standardized Size [t-1]"#
	y[y$Parameter == "Ln_Size_t_st", ]$Parameter 	<- "Standardized Size [t]"#
	y[y$Parameter == "Ln_Size_min_st", ]$Parameter 	<- "Standardized Minimum Size"#
	y[y$Parameter == "CA_t_1", ]$Parameter 			<- "Invasive Moth [t-1]"#
	y[y$Parameter == "CH_t_1", ]$Parameter 			<- "Native Bug [t-1]"#
	y[y$Parameter == "T1", ]$Parameter 				<- "Temp. PCA Axis 1"#
	y[y$Parameter == "T2", ]$Parameter 				<- "Temp. PCA Axis 2"#
	y[y$Parameter == "P1", ]$Parameter 				<- "Precip. PCA Axis 1"#
	y[y$Parameter == "P2", ]$Parameter 				<- "Precip. PCA Axis 2"#
	y[y$Parameter == "T1*P1", ]$Parameter 			<- "Temp. PCA Axis 1 x Precip. PCA Axis 1"#
	y[y$Parameter == "T2*P1", ]$Parameter 			<- "Temp. PCA Axis 2 x Precip. PCA Axis 1"#
	y[y$Parameter == "T1*P2", ]$Parameter 			<- "Temp. PCA Axis 1 x Precip. PCA Axis 2"#
	y[y$Parameter == "T2*P2", ]$Parameter 			<- "Temp. PCA Axis 2 x Precip. PCA Axis 2"#
	y %<>% as.data.table %>%   #
	# rename column names#
	setnames("StdErr",		"Standard Error") %>%#
	setnames("LowerWaldCL",	"Lower Wald CL") %>%#
	setnames("UpperWaldCL",	"Upper Wald CL") %>%#
	setnames("ChiSq",		"Chi-squared") %>%#
	setnames("ProbChiSq",	"Prob(Chi-squared)") %>%#
	return(y)#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
model_dimensions_name_processing_function <- function(y) {#
	if ("Columns in X" %in% names(y)) #
		{setnames(y, "Columns in X", "Number of Parameters")}#
	if (length(grep("Columns in Z", names(y), fixed=T)) > 0) #
		{setnames(y, names(y)[grep("Columns in Z", names(y), fixed=T)], #
		"ColumnsZ")}#
	return(y)#
	}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Process model results for a model selection table using data from SAS GLIMMIX models#
#' #
#' @param y#
#' @param select_list#
#
model_results_processing_function <- function(y, select_list) {#
	#y[, replace_list][y[, replace_list] > 0] <- "X"#
	#y[, replace_list][y[, replace_list] == 0] <- "."#
	# change column names#
	if ("CA" %in% names(y)) {setnames(y, "CA", "Invasive Moth")}#
	if ("CH" %in% names(y)) {setnames(y, "CH", "Native Bug")}#
	if ("DA" %in% names(y)) {setnames(y, "DA", "Native Scale")}#
	if ("ME" %in% names(y)) {setnames(y, "ME", "Native Moth")}#
	if ("Ln_Size_min_st" %in% names(y)) #
		{setnames(y, "Ln_Size_min_st", "Ln(Minimum Plant Size), standardized")}#
	#y = y[, select_list]#
	return(y)			#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Format parameters and their estimates for a model selection table using data from SAS GLIMMIX#
#' #
#' @param y#
#
modelselection_format_parameter_estimates_function <- function(y) {	#
	y %<>% #
	dplyr::select(#
		Effect,#
		Estimate,#
		StdErr,#
		DF,#
		tValue,#
		Probt#
	) %>%#
	as.data.table %>%   #
	# rename column names#
	setnames("StdErr",	"Standard Error") %>%#
	setnames("tValue",	"t-Value") %>%#
	setnames("Probt",	"Prob(t)")#
	# change effect names#
	y[y$"Effect" == "Ln_Cone_t_1_st"]$Effect 	<- "Standardized Cone Volume [t-1]"#
	y[y$"Effect" == "Ln_Size_t_1_st"]$Effect 	<- "Standardized Size [t-1]"#
	y[y$"Effect" == "CA_t_1"]$Effect 			<- "Invasive Moth [t-1]"#
	y[y$"Effect" == "CH_t_1"]$Effect 			<- "Native Bug [t-1]"#
	y[y$"Effect" == "T1"]$Effect 				<- "Temp. PCA Axis 1"#
	y[y$"Effect" == "T2"]$Effect 				<- "Temp. PCA Axis 2"#
	y[y$"Effect" == "P1"]$Effect 				<- "Precip. PCA Axis 1"#
	y[y$"Effect" == "P2"]$Effect 				<- "Precip. PCA Axis 2"#
	y[y$"Effect" == "T1*P1"]$Effect 				<- "Temp. PCA Axis 1 x Precip. PCA Axis 1"#
	y[y$"Effect" == "T2*P1"]$Effect 				<- "Temp. PCA Axis 2 x Precip. PCA Axis 1"#
	y[y$"Effect" == "T1*P2"]$Effect 				<- "Temp. PCA Axis 1 x Precip. PCA Axis 2"#
	y[y$"Effect" == "T2*P2"]$Effect 				<- "Temp. PCA Axis 2 x Precip. PCA Axis 2"#
	return(y)#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Format parameters and their estimates for a model selection table using data from SAS GLIMMIX#
#' #
#' @param models.dimensions#
#' @param convergence.status#
#' @param parameter.estimates#
#' @param conditional.fit.statistics#
#' @param select_list#
#
modelselection_model_results_function <- function(#
	models.dimensions, #
	convergence.status, #
	parameter.estimates, #
	conditional.fit.statistics, #
	select_list#
)#
{#
	conditional.fit.statistics %<>% #
		short_to_long_format_function %>%#
		.[, -3]#
	models.dimensions %<>%#
		short_to_long_format_function %>%#
		dplyr::select(modelVars, `Columns in X`, starts_with("Columns in Z"))#
	y = merge(convergence.status, parameter.estimates) %>%#
		# filter out models that didn't converge#
		filter(pdG==1) %>%#
		# change effects to columns#
		short_to_long_format_X_function %>%#
		# fit statistics#
		merge(conditional.fit.statistics) %>%#
		merge(models.dimensions) %>%#
		model_dimensions_name_processing_function %>%#
		mutate(#
			cAIC = `-2 log L(y | r. effects)` + #
				2*(`Number of Parameters` + ColumnsZ)#
		) %>%#
		arrange(cAIC) %>%#
		dplyr::select(-(`-2 log L(y | r. effects)`))#
	# temperature and precipitation interactions#
	y$`Temperature x Precipitation` = "NA"#
	y %<>%#
	mutate(#
		`Temperature x Precipitation` = replace(`Temperature x Precipitation`, #
			which(`T1*P1`=="X" & `T1*P2`!="X" & `T2*P1`!="X" & `T2*P2`!= "X"),#
			"T1 x P1"),#
		`Temperature x Precipitation` = replace(`Temperature x Precipitation`, #
			which(`T1*P1`!="X" & `T1*P2`=="X" & `T2*P1`!="X" & `T2*P2`!="X"),#
			"T1 x P2"),#
		`Temperature x Precipitation` = replace(`Temperature x Precipitation`, #
			which(`T1*P1`!="X" & `T1*P2`!="X" & `T2*P1`=="X" & `T2*P2`!="X"),#
			"T2 x P1"),#
		`Temperature x Precipitation` = replace(`Temperature x Precipitation`, #
			which(`T1*P1`!="X" & `T1*P2`!="X" & `T2*P1`!="X" & `T2*P2`=="X"),#
			"T2 x P2"),#
		`Temperature x Precipitation` = replace(`Temperature x Precipitation`, #
			which(`T1*P1`=="X" & `T1*P2`=="X" & `T2*P1`=="X" & `T2*P2`=="X"),#
			"Full")#
	)#
	# insect/weather interactions#
	y[which(select(y, starts_with("P1*CA_t_1*CH_t")) == "X"),]$`P1*CA_t_1`<-"X"#
	y[which(select(y, starts_with("P1*CA_t_1*CH_t")) == "X"),]$`P1*CH_t_1`<-"X"#
	y[which(select(y, starts_with("P1*CA_t_1*CH_t")) == #
		"X"),]$`CA_t_1*CH_t_1`<-"X"#
	y[which(select(y, starts_with("T1*CA_t_1*CH_t")) == "X"),]$`T1*CA_t_1`<-"X"#
	y[which(select(y, starts_with("T1*CA_t_1*CH_t")) == "X"),]$`T1*CH_t_1`<-"X"#
	y[which(select(y, starts_with("T1*CA_t_1*CH_t")) ==#
		"X"),]$`CA_t_1*CH_t_1`<-"X"#
	y <- y[, select_list]#
	y %<>% cAIC_function#
	y %<>% names_processing_function#
	y[, "Temperature x Precipitation"][y[, "Temperature x Precipitation"] == "NA"] <- "."#
	return(y)#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Process model results for a model selection table using data from SAS GLIMMIX models#
#' #
#' @param y#
#' @param select_list#
#
names_processing_function <- function(y) {#
	# change column names#
	if ("CA" %in% names(y)) {setnames(y, "CA", "Invasive Moth")}#
	if ("CH" %in% names(y)) {setnames(y, "CH", "Native Bug")}#
	if ("DA" %in% names(y)) {setnames(y, "DA", "Native Scale")}#
	if ("ME" %in% names(y)) {setnames(y, "ME", "Native Moth")}#
	if ("Ln_Size_t_1_st" %in% names(y)) #
		{setnames(y, "Ln_Size_t_1_st", "ln(Size [t-1]), Stand.")}#
	if ("Ln_Cone_t_1_st" %in% names(y)) #
		{setnames(y, "Ln_Cone_t_1_st", "ln(Cone Volume [t-1]), Stand.")}#
	if (length(grep("Ln_Cylinder", names(y), fixed=T)) > 0) #
		{setnames(y, names(y)[grep("Ln_Cylinder", names(y), fixed=T)], #
		"ln(Cylinder Volume [t-1]), Stand.")}#
	if ("CA_t_1" %in% names(y)) #
		{setnames(y, "CA_t_1", "Invasive Moth [t-1]")}#
	if ("CH_t_1" %in% names(y)) #
		{setnames(y, "CH_t_1", "Native Bug [t-1]")}#
	if ("DA_t_1" %in% names(y)) #
		{setnames(y, "DA_t_1", "Native Scale [t-1]")}#
	if ("ME_t_1" %in% names(y)) #
		{setnames(y, "ME_t_1", "Native Moth [t-1]")}#
	if ("NatInsect_t_1" %in% names(y)) #
		{setnames(y, "NatInsect_t_1", "Native Insects [t-1]")}#
	if ("CA_t_1*CH_t_1" %in% names(y)) #
		{setnames(y, "CA_t_1*CH_t_1", "Invasive Moth [t-1] x Native Bug [t-1]")}#
	if (length(grep("CA_t_1*NatInse", names(y), fixed=T)) > 0) #
		{setnames(y, names(y)[grep("CA_t_1*NatInse", names(y), fixed=T)], #
		"Invasive Moth [t-1] x Native Insects [t-1]")}#
	if ("P1*CA_t_1" %in% names(y)) #
		{setnames(y, "P1*CA_t_1", "Invasive Moth [t-1] x Precipitation")}#
	if ("T1*CA_t_1" %in% names(y)) #
		{setnames(y, "T1*CA_t_1", "Invasive Moth [t-1] x Temperature")}#
	if ("P1*CH_t_1" %in% names(y)) #
		{setnames(y, "P1*CH_t_1", "Native Bug [t-1] x Precipitation")}#
	if ("T1*CH_t_1" %in% names(y)) #
		{setnames(y, "T1*CH_t_1", "Native Bug [t-1] x Temperature")}#
	if ("P1*DA_t_1" %in% names(y)) #
		{setnames(y, "P1*DA_t_1", "Native Scale [t-1] x Precipitation")}#
	if ("T1*DA_t_1" %in% names(y)) #
		{setnames(y, "T1*DA_t_1", "Native Scale [t-1] x Temperature")}#
	if ("P1*ME_t_1" %in% names(y)) #
		{setnames(y, "P1*ME_t_1", "Native Moth [t-1] x Precipitation")}#
	if ("T1*CH_t_1" %in% names(y)) #
		{setnames(y, "T1*ME_t_1", "Native Moth [t-1] x Temperature")}#
	if ("T1" %in% names(y)) #
		{setnames(y, "T1", "Temperature")}#
	if ("P1" %in% names(y)) #
		{setnames(y, "P1", "Precipitation")}#
	return(y)			#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Create table with the convergence status of multiple SAS GLIMMIX models#
#' #
#' @param modelresults#
#
randeffects_converg_status_function <- function(modelresults) {#
	modelresults %>% as.data.frame %>%#
		group_by(`Random Effects`) %>%#
		summarise(#
			`Positive Definite G-Matrix?` = `Positive Definite G-Matrix?`[1]#
		) %>%#
		as.data.frame %>%#
		arrange(desc(`Positive Definite G-Matrix?`))#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Create table with the covariance parameter estimates from multiple SAS GLIMMIX models#
#' #
#' @param modelresults#
#
randeffects_covar_parms_estimates_function <- function(modelresults){#
	modelresults %>%#
		filter(`Positive Definite G-Matrix?`=="Yes") %>%#
		dplyr::select(#
			`Random Effects`, #
			`Covariance Parameter`,#
			Estimate,#
			`Standard Error`,#
			Alpha,#
			`Lower LR CL`,#
			`Prob(Lower LR)`,#
			`Upper LR CL`,#
			`Prob(Upper LR)` 			#
		) %>%#
		as.data.frame#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Create table with G-side effects test results of multiple SAS GLIMMIX models#
#' #
#' @param modelresults#
#
randeffects_G_side_effects_test_function <- function(modelresults) {#
	modelresults %>%#
		filter(`Positive Definite G-Matrix?`=="Yes") %>%#
		dplyr::select(#
			`Random Effects`, #
			Label, #
			DF, #
			Objective, #
			`Chi-Squared`, #
			`Prob(Chi-Squared)`#
		) %>%#
		group_by(`Random Effects`) %>%#
		summarise(#
			DF=DF[1],#
			Objective=Objective[1],#
			`Chi-Squared`=`Chi-Squared`[1],#
			`Prob(Chi-Squared)`=`Prob(Chi-Squared)`[1]#
		) %>%#
		as.data.frame#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
parms.estimates %<>% #
		dcast(modelVars~Effect, value.var="Estimate", fun=X_function)
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Return table comparing SAS GLIMMIX random effects models.#
#' #
#' @param modelresults#
#
randeffects_model_selection_function <- function(modelresults){#
	x = modelresults %>%#
		filter(`Positive Definite G-Matrix?`=="Yes") %>%#
		dplyr::select(-Label, -Objective) %>%#
		dplyr::select(-(Note:Subject)) %>%#
		group_by(`Random Effects`) %>%#
		filter(row_number(DF)==1) %>%#
		as.data.frame %>%#
		arrange(AIC)#
		x %<>% AIC_function		#
	return(x)#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
#' Change from long to short format, using "Value"#
#' @param x#
#
short_to_long_format_function <- function(x) {#
	x %<>% dcast(modelVars~Descr, value.var="Value")#
}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
short_to_long_format_X_function
