seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
library(Mage)
??prepDataTransitionMatrix
??projection.matrix
1/0.167
0.167*3
library(purrr)
?map
setwd('/Users/KSauby/Documents/Projects/Dissertation')
library(ProjectTemplate)#
load.project()#
#
# load GTMNERR#
#
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')#
load.project()#
#
# load ACSampling#
#
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')#
load.project()#
#
# load marsico project#
#
setwd('/Users/KSauby/Documents/Projects/marsico-time-series')#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
# RANDOM EFFECTS SELECTION - SIZE#
# Size#
#
covariance.parms.test = #
	Survival.stricta.random.effects.models.covariance.parameters.test#
convergence.status = #
	Survival.stricta.random.effects.models.convergence.status %>%#
	filter(!(modelVars %in% c("DF1","DF2","DF3")))#
covariance.parms.estimates = #
	Survival.stricta.random.effects.models.covariance.parameter.estimates#
conditional.fit.statistics = #
	Survival.stricta.random.effects.models.conditional.fit.statistics#
fit.statistics = #
	Survival.stricta.random.effects.models.fit.statistics %>%#
	filter(!(modelVars %in% c("DF1","DF2","DF3")))#
#
conditional.fit.statistics %<>% #
	convertShorttoLong %>%#
	.[, -(2:3)]#
fit.statistics %<>% #
	#dplyr::select(-Criterion) %>%#
	dcast(modelVars ~ Descr, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`-2 Log Likelihood`,#
		`BIC  (smaller is better)`#
	)#
#
parms.estimates = #
	Survival.stricta.random.effects.models.parameter.estimates %>%#
	filter(!is.na(Lower)) %>%#
	round_df(2)
head(parms.estimates)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
parms.estimates = #
	Survival.stricta.random.effects.models.parameter.estimates %>%#
	filter(!is.na(Lower)) %>%#
	round_df(2) %>%#
	roundpValues %>%#
	constructConfIntpValue(round_n=3) %>%#
	dplyr::select(-Estimate) %>%#
	setnames("Estimate.CF", "Estimate") %>%#
	filter(!(is.na(DF)))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
parms.estimates %<>% #
	filter(!is.na(StdErr)) %>%#
	reshape2::dcast(modelVars~Effect, value.var="Estimate")#
modelresults <- merge(parms.estimates, covariance.parms.test,#
	by="modelVars", all=T) %>%#
	merge(convergence.status, all=T) %>%#
	merge(covariance.parms.estimates, all=T) %>%#
	merge(conditional.fit.statistics, all=T) %>%#
	merge(filter(fit.statistics), all=T) %>%#
	as.data.table %>%#
	.[modelVars == "YEARPLANTID", 			#
		modelVars := "Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONWITHINYEAR", 	#
		modelVars := "Location X Year"] %>%#
	.[modelVars == "PLANTID", 				#
		modelVars := "Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONYEARPLANTID", 	#
		modelVars := "Location, Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONYEAR", 			#
		modelVars := "Location, Year"] %>%#
	.[modelVars == "LOCATION", 				#
		modelVars := "Location"] %>%#
	.[modelVars == "LOCATIONPLANTID", 		#
		modelVars := "Location, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONWYEARPLANTID", 	#
		modelVars := "Location X Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "YEAR", 					#
		modelVars := "Year"] %>%#
	.[modelVars == "ISLAND", 					#
		modelVars := "Island"] %>%#
	.[modelVars == "NETWORKISLAND", 					#
		modelVars := "Network X Island"] %>%#
	.[modelVars == "NETWORK", 					#
		modelVars := "Network"] %>%#
	.[modelVars == "NETWORKHABITATTYPE", 					#
		modelVars := "Network X Habitat Type"] %>%#
	.[modelVars == "HABITATTYPE", 					#
		modelVars := "Habitat Type"]#
modelresults$pdG %<>% as.character#
modelresults %<>% as.data.table %>%#
	.[pdG == 0, pdG := "No"] %>%#
	.[pdG == 1, pdG := "Yes"] %>%#
	setnames("modelVars", 				"Random Effects") %>%#
	setnames("pdG", 					"Positive Definite G-Matrix?") %>%#
	setnames("ChiSq", 					"Chi-Squared") %>%#
	setnames("ProbChiSq", 				"Prob(Chi-Squared)") %>%#
	setnames("CovParm", 				"Covariance Parameter") %>%#
	setnames("StdErr", 					"Standard Error") %>%#
#	setnames("tValue", 					"t-Value") %>%#
#	setnames("Probt", 					"Prob(t)") %>%#
	setnames("LowerLRCL", 				"Lower LR CL") %>%#
	setnames("probLRLower", 			"Prob(Lower LR)") %>%#
	setnames("UpperLRCL", 				"Upper LR CL") %>%#
	setnames("probLRUpper", 			"Prob(Upper LR)") %>%#
	setnames("Pearson Chi-Square / DF",	"Pearson Chi-Square/DF") %>%#
	setnames("-2 Log Likelihood",		"-2 Log Lik")#
stricta.size.model.results <- modelresults %>% setnames("BIC  (smaller is better)","BIC")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
stricta.size.converg.status = #
	randeffects_converg_status_function(modelresults=stricta.size.model.results)#
stricta.size.covar.results = #
	randeffects_G_side_effects_test_function(stricta.size.model.results)#
stricta.size.covar.parms = #
	randeffects_covar_parms_estimates_function(stricta.size.model.results)#
stricta.size.rand.model.selection = stricta.size.model.results %>% #
	dplyr::filter(`Positive Definite G-Matrix?` == "Yes") %>% #
	dplyr::select(-Label, -Objective) %>% #
	dplyr::select(-(Note:`Prob(Upper LR)`)) %>% #
	dplyr::group_by(`Random Effects`) %>% #
	dplyr::filter(row_number(DF) == 1) %>% #
	as.data.frame %>% #
	dplyr::arrange(`BIC`) %>%#
	filter(!is.na(Intercept))#
stricta.size.rand.model.selection %<>% BIC_function
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
stricta.size.rand.model.selection[which(stricta.size.rand.model.selection$`Random Effects`=="Network"), ]$`Random Effects` <- "Plot Neighborhood"#
y <- stricta.size.rand.model.selection %>%#
	processColumnNames %>%#
	processModSelectionColumnNames %>%#
	dplyr::select(-c(#
		`Chi-Squared`,#
		`Prob(Chi-Squared)`,#
		`Pearson Chi-Square/DF`,#
		`-2 Log Lik`#
	)) %>%#
	setnames("cactus_density_per_p", "Cactus Density per Plot") %>%#
	#setnames("NSegLosttoClones_t_s", "# Segments Lost to Clones") %>%#
	setnames("C_t", "$C_t$") %>%#
	setnames("delta BIC", "$\\Delta$ BIC") %>%#
	setnames("Moth_Evidence_t_1", "Moth Evidence") %>%#
	dplyr::select(#
		`Random Effects`,#
		`$\\beta_{0}$`,#
		`$C_t$`,#
		Clonal,#
		`Cactus Density per Plot`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Evidence`,#
		`$\\Delta$ BIC`,#
		`Model $\\Lagr$`,#
		`$P$(Model)`#
	) %>%#
	as.data.frame %>%#
	setnames("Model $\\Lagr$", "M $\\Lagr$") %>%#
	setnames("$P$(Model)", "$P$(M)")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
GTMNERR_survival_GLMM_models <- y
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
GTMNERR_survival_GLMM_models
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
# --------------------------------------------------------------------------- ##
# PROPORTIONAL HAZARDS MODELS#
# --------------------------------------------------------------------------- ##
#
fit.statistics <- Survival.stricta.icphreg.fit.statistics #
#
fit.statistics %<>% #
	dcast(modelVars ~ Criterion, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`BIC (Smaller is Better)`#
	)#
type.3.tests <- Survival.stricta.icphreg.type.3.tests #
#
type.3.tests %<>% #
	dcast(modelVars ~ Effect, value.var = "ProbChiSq")#
#
type.3.tests %<>% #
	merge(fit.statistics, by="modelVars") %>%#
	setnames("modelVars", "Cubic Splines DF") %>%#
	setnames("CAPlantPres","Invasive Moth") %>%#
	setnames("MEPlantPres","Native Moth") %>%#
	setnames("OldMothPlantPres","Moth Evidence") %>%#
	setnames("BIC (Smaller is Better)","BIC") %>%#
	dplyr::select(#
		`Cubic Splines DF`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Evidence`,#
		Clonal,#
		Network,#
		BIC#
	) %>%#
	BIC_function %>%#
	setnames("delta BIC", "$\\Delta$BIC") %>%#
	setnames("Model Lik", "M $\\Lagr$") %>%#
	setnames("Prob(Model)", "$P$(M)")#
type.3.tests[,c(#
	"Invasive Moth",#
	"Native Moth"#
)] %<>% apply(2, as.numeric)#
type.3.tests %<>%#
	round_df(2)#
#
GTMNERR_survival_prop_haz_models <- type.3.tests	#
#
# --------------------------------------------------------------------------- ##
# GENERALIZED LINEAR MIXED MODELS#
# --------------------------------------------------------------------------- ##
#
# RANDOM EFFECTS SELECTION - SIZE#
# Size#
#
covariance.parms.test = #
	Survival.stricta.random.effects.models.covariance.parameters.test#
convergence.status = #
	Survival.stricta.random.effects.models.convergence.status %>%#
	filter(!(modelVars %in% c("DF1","DF2","DF3")))#
covariance.parms.estimates = #
	Survival.stricta.random.effects.models.covariance.parameter.estimates#
conditional.fit.statistics = #
	Survival.stricta.random.effects.models.conditional.fit.statistics#
fit.statistics = #
	Survival.stricta.random.effects.models.fit.statistics %>%#
	filter(!(modelVars %in% c("DF1","DF2","DF3")))#
#
conditional.fit.statistics %<>% #
	convertShorttoLong %>%#
	.[, -(2:3)]#
fit.statistics %<>% #
	#dplyr::select(-Criterion) %>%#
	dcast(modelVars ~ Descr, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`-2 Log Likelihood`,#
		`BIC  (smaller is better)`#
	)#
#
parms.estimates = #
	Survival.stricta.random.effects.models.parameter.estimates %>%#
	filter(!is.na(Lower)) %>%#
	round_df(2) %>%#
	roundpValues %>%#
	constructConfIntpValue(round_n=3) %>%#
	dplyr::select(-Estimate) %>%#
	setnames("Estimate.CF", "Estimate") %>%#
	filter(!(is.na(DF)))#
parms.estimates %<>% #
	filter(!is.na(StdErr)) %>%#
	reshape2::dcast(modelVars~Effect, value.var="Estimate")#
modelresults <- merge(parms.estimates, covariance.parms.test,#
	by="modelVars", all=T) %>%#
	merge(convergence.status, all=T) %>%#
	merge(covariance.parms.estimates, all=T) %>%#
	merge(conditional.fit.statistics, all=T) %>%#
	merge(filter(fit.statistics), all=T) %>%#
	as.data.table %>%#
	.[modelVars == "YEARPLANTID", 			#
		modelVars := "Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONWITHINYEAR", 	#
		modelVars := "Location X Year"] %>%#
	.[modelVars == "PLANTID", 				#
		modelVars := "Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONYEARPLANTID", 	#
		modelVars := "Location, Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONYEAR", 			#
		modelVars := "Location, Year"] %>%#
	.[modelVars == "LOCATION", 				#
		modelVars := "Location"] %>%#
	.[modelVars == "LOCATIONPLANTID", 		#
		modelVars := "Location, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONWYEARPLANTID", 	#
		modelVars := "Location X Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "YEAR", 					#
		modelVars := "Year"] %>%#
	.[modelVars == "ISLAND", 					#
		modelVars := "Island"] %>%#
	.[modelVars == "NETWORKISLAND", 					#
		modelVars := "Network X Island"] %>%#
	.[modelVars == "NETWORK", 					#
		modelVars := "Network"] %>%#
	.[modelVars == "NETWORKHABITATTYPE", 					#
		modelVars := "Network X Habitat Type"] %>%#
	.[modelVars == "HABITATTYPE", 					#
		modelVars := "Habitat Type"]#
modelresults$pdG %<>% as.character#
modelresults %<>% as.data.table %>%#
	.[pdG == 0, pdG := "No"] %>%#
	.[pdG == 1, pdG := "Yes"] %>%#
	setnames("modelVars", 				"Random Effects") %>%#
	setnames("pdG", 					"Positive Definite G-Matrix?") %>%#
	setnames("ChiSq", 					"Chi-Squared") %>%#
	setnames("ProbChiSq", 				"Prob(Chi-Squared)") %>%#
	setnames("CovParm", 				"Covariance Parameter") %>%#
	setnames("StdErr", 					"Standard Error") %>%#
#	setnames("tValue", 					"t-Value") %>%#
#	setnames("Probt", 					"Prob(t)") %>%#
	setnames("LowerLRCL", 				"Lower LR CL") %>%#
	setnames("probLRLower", 			"Prob(Lower LR)") %>%#
	setnames("UpperLRCL", 				"Upper LR CL") %>%#
	setnames("probLRUpper", 			"Prob(Upper LR)") %>%#
	setnames("Pearson Chi-Square / DF",	"Pearson Chi-Square/DF") %>%#
	setnames("-2 Log Likelihood",		"-2 Log Lik")#
stricta.size.model.results <- modelresults %>% setnames("BIC  (smaller is better)","BIC")#
stricta.size.converg.status = #
	randeffects_converg_status_function(modelresults=stricta.size.model.results)#
stricta.size.covar.results = #
	randeffects_G_side_effects_test_function(stricta.size.model.results)#
stricta.size.covar.parms = #
	randeffects_covar_parms_estimates_function(stricta.size.model.results)#
stricta.size.rand.model.selection = stricta.size.model.results %>% #
	dplyr::filter(`Positive Definite G-Matrix?` == "Yes") %>% #
	dplyr::select(-Label, -Objective) %>% #
	dplyr::select(-(Note:`Prob(Upper LR)`)) %>% #
	dplyr::group_by(`Random Effects`) %>% #
	dplyr::filter(row_number(DF) == 1) %>% #
	as.data.frame %>% #
	dplyr::arrange(`BIC`) %>%#
	filter(!is.na(Intercept))#
stricta.size.rand.model.selection %<>% BIC_function#
#
stricta.size.rand.model.selection[which(stricta.size.rand.model.selection$`Random Effects`=="Network"), ]$`Random Effects` <- "Plot Neighborhood"#
y <- stricta.size.rand.model.selection %>%#
	processColumnNames %>%#
	processModSelectionColumnNames %>%#
	dplyr::select(-c(#
		`Chi-Squared`,#
		`Prob(Chi-Squared)`,#
		`Pearson Chi-Square/DF`,#
		`-2 Log Lik`#
	)) %>%#
	setnames("cactus_density_per_p", "Cactus Density per Plot") %>%#
	#setnames("NSegLosttoClones_t_s", "# Segments Lost to Clones") %>%#
	setnames("C_t", "$C_t$") %>%#
	setnames("delta BIC", "$\\Delta$ BIC") %>%#
	setnames("Moth_Evidence_t_1", "Moth Evidence") %>%#
	dplyr::select(#
		`Random Effects`,#
		`$\\beta_{0}$`,#
		`$C_t$`,#
		Clonal,#
		`Cactus Density per Plot`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Evidence`,#
		`$\\Delta$ BIC`,#
		`Model $\\Lagr$`,#
		`$P$(Model)`#
	) %>%#
	as.data.frame %>%#
	setnames("Model $\\Lagr$", "M $\\Lagr$") %>%#
	setnames("$P$(Model)", "$P$(M)")#
GTMNERR_best_stricta_survival_GLMM_model <- y[1,]#
#
GTMNERR_survival_GLMM_models <- y#
# --------------------------------------------------------------------------- ##
setwd("/Users/KSauby/Documents/Projects/GTMNERR_analysis")#
cache("GTMNERR_survival_prop_haz_models")#
cache("GTMNERR_survival_GLMM_models")#
cache("GTMNERR_best_stricta_survival_GLMM_model")
roundpValues
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
GTMNERR_survival_GLMM_models
dim(GTMNERR_survival_GLMM_models)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/tables')
GTMNERR_survival_GLMM_models
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
stricta.size.rand.model.selection[which(stricta.size.rand.model.selection$`Random Effects`=="Network"), ]$`Random Effects` <- "Plot Neighborhood"#
y <- stricta.size.rand.model.selection %>%#
	processColumnNames %>%#
	processModSelectionColumnNames %>%#
	dplyr::select(-c(#
		`Chi-Squared`,#
		`Prob(Chi-Squared)`,#
		`Pearson Chi-Square/DF`,#
		`-2 Log Lik`#
	)) %>%#
	setnames("cactus_density_per_p", "Cactus Density") %>%#
	#setnames("NSegLosttoClones_t_s", "# Segments Lost to Clones") %>%#
	setnames("C_t", "$C_t$") %>%#
	setnames("delta BIC", "$\\Delta$ BIC") %>%#
	setnames("Moth_Evidence_t_1", "Moth Evidence") %>%#
	dplyr::select(#
		`Random Effects`,#
		`$\\beta_{0}$`,#
		`$C_t$`,#
		Clonal,#
		`Cactus Density`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Evidence`,#
		`$\\Delta$ BIC`,#
		`Model $\\Lagr$`,#
		`$P$(Model)`#
	) %>%#
	as.data.frame %>%#
	setnames("Model $\\Lagr$", "M $\\Lagr$") %>%#
	setnames("$P$(Model)", "$P$(M)")#
GTMNERR_best_stricta_survival_GLMM_model <- y[1,]#
#
GTMNERR_survival_GLMM_models <- y
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
covariance.parms.test = #
	Survival.stricta.random.effects.models.covariance.parameters.test#
convergence.status = #
	Survival.stricta.random.effects.models.convergence.status %>%#
	filter(!(modelVars %in% c("DF1","DF2","DF3")))#
covariance.parms.estimates = #
	Survival.stricta.random.effects.models.covariance.parameter.estimates#
conditional.fit.statistics = #
	Survival.stricta.random.effects.models.conditional.fit.statistics#
fit.statistics = #
	Survival.stricta.random.effects.models.fit.statistics %>%#
	filter(!(modelVars %in% c("DF1","DF2","DF3")))#
#
conditional.fit.statistics %<>% #
	convertShorttoLong %>%#
	.[, -(2:3)]#
fit.statistics %<>% #
	#dplyr::select(-Criterion) %>%#
	dcast(modelVars ~ Descr, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`-2 Log Likelihood`,#
		`BIC  (smaller is better)`#
	)#
#
parms.estimates = #
	Survival.stricta.random.effects.models.parameter.estimates %>%#
	filter(!is.na(Lower)) %>%#
	round_df(2) %>%#
	roundpValues %>%#
	constructConfIntpValue(round_n=3) %>%#
	dplyr::select(-Estimate) %>%#
	setnames("Estimate.CF", "Estimate") %>%#
	filter(!(is.na(DF)))#
parms.estimates %<>% #
	filter(!is.na(StdErr)) %>%#
	reshape2::dcast(modelVars~Effect, value.var="Estimate")#
modelresults <- merge(parms.estimates, covariance.parms.test,#
	by="modelVars", all=T) %>%#
	merge(convergence.status, all=T) %>%#
	merge(covariance.parms.estimates, all=T) %>%#
	merge(conditional.fit.statistics, all=T) %>%#
	merge(filter(fit.statistics), all=T) %>%#
	as.data.table %>%#
	.[modelVars == "YEARPLANTID", 			#
		modelVars := "Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONWITHINYEAR", 	#
		modelVars := "Location X Year"] %>%#
	.[modelVars == "PLANTID", 				#
		modelVars := "Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONYEARPLANTID", 	#
		modelVars := "Location, Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONYEAR", 			#
		modelVars := "Location, Year"] %>%#
	.[modelVars == "LOCATION", 				#
		modelVars := "Location"] %>%#
	.[modelVars == "LOCATIONPLANTID", 		#
		modelVars := "Location, Plant ID (Intercept)"] %>%#
	.[modelVars == "LOCATIONWYEARPLANTID", 	#
		modelVars := "Location X Year, Plant ID (Intercept)"] %>%#
	.[modelVars == "YEAR", 					#
		modelVars := "Year"] %>%#
	.[modelVars == "ISLAND", 					#
		modelVars := "Island"] %>%#
	.[modelVars == "NETWORKISLAND", 					#
		modelVars := "Network X Island"] %>%#
	.[modelVars == "NETWORK", 					#
		modelVars := "Network"] %>%#
	.[modelVars == "NETWORKHABITATTYPE", 					#
		modelVars := "Network X Habitat Type"] %>%#
	.[modelVars == "HABITATTYPE", 					#
		modelVars := "Habitat Type"]#
modelresults$pdG %<>% as.character#
modelresults %<>% as.data.table %>%#
	.[pdG == 0, pdG := "No"] %>%#
	.[pdG == 1, pdG := "Yes"] %>%#
	setnames("modelVars", 				"Random Effects") %>%#
	setnames("pdG", 					"Positive Definite G-Matrix?") %>%#
	setnames("ChiSq", 					"Chi-Squared") %>%#
	setnames("ProbChiSq", 				"Prob(Chi-Squared)") %>%#
	setnames("CovParm", 				"Covariance Parameter") %>%#
	setnames("StdErr", 					"Standard Error") %>%#
#	setnames("tValue", 					"t-Value") %>%#
#	setnames("Probt", 					"Prob(t)") %>%#
	setnames("LowerLRCL", 				"Lower LR CL") %>%#
	setnames("probLRLower", 			"Prob(Lower LR)") %>%#
	setnames("UpperLRCL", 				"Upper LR CL") %>%#
	setnames("probLRUpper", 			"Prob(Upper LR)") %>%#
	setnames("Pearson Chi-Square / DF",	"Pearson Chi-Square/DF") %>%#
	setnames("-2 Log Likelihood",		"-2 Log Lik")#
stricta.size.model.results <- modelresults %>% setnames("BIC  (smaller is better)","BIC")#
stricta.size.converg.status = #
	randeffects_converg_status_function(modelresults=stricta.size.model.results)#
stricta.size.covar.results = #
	randeffects_G_side_effects_test_function(stricta.size.model.results)#
stricta.size.covar.parms = #
	randeffects_covar_parms_estimates_function(stricta.size.model.results)#
stricta.size.rand.model.selection = stricta.size.model.results %>% #
	dplyr::filter(`Positive Definite G-Matrix?` == "Yes") %>% #
	dplyr::select(-Label, -Objective) %>% #
	dplyr::select(-(Note:`Prob(Upper LR)`)) %>% #
	dplyr::group_by(`Random Effects`) %>% #
	dplyr::filter(row_number(DF) == 1) %>% #
	as.data.frame %>% #
	dplyr::arrange(`BIC`) %>%#
	filter(!is.na(Intercept))#
stricta.size.rand.model.selection %<>% BIC_function#
#
stricta.size.rand.model.selection[which(stricta.size.rand.model.selection$`Random Effects`=="Network"), ]$`Random Effects` <- "Plot Neighborhood"#
y <- stricta.size.rand.model.selection %>%#
	processColumnNames %>%#
	processModSelectionColumnNames %>%#
	dplyr::select(-c(#
		`Chi-Squared`,#
		`Prob(Chi-Squared)`,#
		`Pearson Chi-Square/DF`,#
		`-2 Log Lik`#
	)) %>%#
	setnames("cactus_density_per_p", "Cactus Density") %>%#
	#setnames("NSegLosttoClones_t_s", "# Segments Lost to Clones") %>%#
	setnames("C_t", "$C_t$") %>%#
	setnames("delta BIC", "$\\Delta$ BIC") %>%#
	setnames("Moth_Evidence_t_1", "Moth Evidence") %>%#
	dplyr::select(#
		`Random Effects`,#
		`$\\beta_{0}$`,#
		`$C_t$`,#
		Clonal,#
		`Cactus Density`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Evidence`,#
		`$\\Delta$ BIC`,#
		`Model $\\Lagr$`,#
		`$P$(Model)`#
	) %>%#
	as.data.frame %>%#
	setnames("Model $\\Lagr$", "M $\\Lagr$") %>%#
	setnames("$P$(Model)", "$P$(M)")#
GTMNERR_best_stricta_survival_GLMM_model <- y[1,]#
#
GTMNERR_survival_GLMM_models <- y
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
GTMNERR_survival_GLMM_models
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/tables')
print(#
	xtable(#
		GTMNERR_survival_GLMM_models, #
		digits=0,#
		caption="Ranking of GLMMs explaining variation in *O. stricta* survival at GTMNERR.",#
		align=c(#
			rep("p{1cm}",2),#
			"p{3.7cm}",#
			rep("p{1.35cm}",6),#
			"p{0.9cm}",#
			"p{0.9cm}",#
			"p{0.8cm}"#
		)#
	),#
	caption.placement = "top",#
	sanitize.text.function = function(x) {x},#
	tabular.environment = "longtable",#
    include.rownames = FALSE,  # because addtorow will substitute the default row names #
         add.to.row = addtorow,     # this is where you actually make the substitution#
         hline.after=c(-1),#
		 floating=F       #
)
setwd('/Users/KSauby/Documents/Projects/Dissertation')
# for plotting of xtables that span multiple pages#
addtorow          <- list()#
addtorow$pos      <- list()#
addtorow$pos[[1]] <- c(0)#
addtorow$command  <- c(paste("\\hline \n",#
                             "\\endhead \n",#
                             "\\hline \n",#
                             #"{\\footnotesize Continued on next page} \n",#
                             "\\endfoot \n",#
                             "\\endlastfoot \n",sep=""))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/tables')
print(#
	xtable(#
		GTMNERR_survival_GLMM_models, #
		digits=0,#
		caption="Ranking of GLMMs explaining variation in *O. stricta* survival at GTMNERR.",#
		align=c(#
			rep("p{1cm}",2),#
			"p{3.7cm}",#
			rep("p{1.35cm}",6),#
			"p{0.9cm}",#
			"p{0.9cm}",#
			"p{0.8cm}"#
		)#
	),#
	caption.placement = "top",#
	sanitize.text.function = function(x) {x},#
	tabular.environment = "longtable",#
    include.rownames = FALSE,  # because addtorow will substitute the default row names #
         add.to.row = addtorow,     # this is where you actually make the substitution#
         hline.after=c(-1),#
		 floating=F       #
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/tables')
GTMNERR_survival_prop_haz_models
dim(GTMNERR_survival_prop_haz_models)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/tables')
print(#
	xtable(#
		GTMNERR_survival_prop_haz_models, #
		digits=0,#
		caption="Ranking of Proportional Hazards Regression Models explaining variation in *O. stricta* survival at GTMNERR.",#
		align=c(#
			rep("p{1cm}",1),#
			"p{3.7cm}",#
			rep("p{1.35cm}",6),#
			"p{0.9cm}",#
			"p{0.9cm}",#
			"p{0.8cm}"#
		)#
	),#
	caption.placement = "top",#
	sanitize.text.function = function(x) {x},#
	tabular.environment = "longtable",#
    include.rownames = FALSE,  # because addtorow will substitute the default row names #
         add.to.row = addtorow,     # this is where you actually make the substitution#
         hline.after=c(-1),#
		 floating=F       #
)
setwd('/Users/KSauby/Documents/Projects/Dissertation')
bookdown::render_book('index.Rmd')
setwd('/Users/KSauby/Documents/Projects/Dissertation')
bookdown::render_book('index.Rmd')
dim(GTMNERR_survival_GLMM_models)
setwd('/Users/KSauby/Documents/Projects/Dissertation')
bookdown::render_book('index.Rmd')
setwd('/Users/KSauby/Documents/Projects/Dissertation')
bookdown::render_book('index.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
# --------------------------------------------------------------------------- ##
# PROPORTIONAL HAZARDS MODELS#
# --------------------------------------------------------------------------- ##
#
fit.statistics <- Survival.stricta.icphreg.fit.statistics #
#
fit.statistics %<>% #
	dcast(modelVars ~ Criterion, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`BIC (Smaller is Better)`#
	)#
type.3.tests <- Survival.stricta.icphreg.type.3.tests #
#
type.3.tests %<>% #
	dcast(modelVars ~ Effect, value.var = "ProbChiSq")#
#
type.3.tests %<>% #
	merge(fit.statistics, by="modelVars") %>%#
	setnames("modelVars", "Cubic Splines DF") %>%#
	setnames("CAPlantPres","Invasive Moth") %>%#
	setnames("MEPlantPres","Native Moth") %>%#
	setnames("OldMothPlantPres","Moth Evidence") %>%#
	setnames("BIC (Smaller is Better)","BIC") %>%#
	dplyr::select(#
		`Cubic Splines DF`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Evidence`,#
		Clonal,#
		Network,#
		BIC#
	) %>%#
	BIC_function %>%#
	setnames("delta BIC", "$\\Delta$BIC") %>%#
	setnames("Model Lik", "M $\\Lagr$") %>%#
	setnames("Prob(Model)", "$P$(M)")#
type.3.tests[,c(#
	"Invasive Moth",#
	"Native Moth"#
)] %<>% apply(2, as.numeric)#
type.3.tests %<>%#
	round_df(2)#
#
GTMNERR_survival_prop_haz_models <- type.3.tests
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
GTMNERR_survival_prop_haz_models
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
# --------------------------------------------------------------------------- ##
# PROPORTIONAL HAZARDS MODELS#
# --------------------------------------------------------------------------- ##
#
fit.statistics <- Survival.stricta.icphreg.fit.statistics #
#
fit.statistics %<>% #
	dcast(modelVars ~ Criterion, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`BIC (Smaller is Better)`#
	)#
type.3.tests <- Survival.stricta.icphreg.type.3.tests #
#
type.3.tests %<>% #
	dcast(modelVars ~ Effect, value.var = "ProbChiSq")#
#
type.3.tests %<>% #
	roundpValues %>%#
	merge(fit.statistics, by="modelVars") %>%#
	setnames("modelVars", "Cubic Splines DF") %>%#
	setnames("CAPlantPres","Invasive Moth") %>%#
	setnames("MEPlantPres","Native Moth") %>%#
	setnames("OldMothPlantPres","Moth Evidence") %>%#
	setnames("BIC (Smaller is Better)","BIC") %>%#
	dplyr::select(#
		`Cubic Splines DF`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Evidence`,#
		Clonal,#
		Network,#
		BIC#
	) %>%#
	BIC_function %>%#
	setnames("delta BIC", "$\\Delta$BIC") %>%#
	setnames("Model Lik", "M $\\Lagr$") %>%#
	setnames("Prob(Model)", "$P$(M)")#
type.3.tests[,c(#
	"Invasive Moth",#
	"Native Moth"#
)] %<>% apply(2, as.numeric)#
type.3.tests %<>%#
	round_df(2)#
#
GTMNERR_survival_prop_haz_models <- type.3.tests
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/R')
# --------------------------------------------------------------------------- ##
# PROPORTIONAL HAZARDS MODELS#
# --------------------------------------------------------------------------- ##
#
fit.statistics <- Survival.stricta.icphreg.fit.statistics #
#
fit.statistics %<>% #
	dcast(modelVars ~ Criterion, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`BIC (Smaller is Better)`#
	)#
type.3.tests <- Survival.stricta.icphreg.type.3.tests #
#
type.3.tests %<>% #
	dcast(modelVars ~ Effect, value.var = "ProbChiSq")#
#
type.3.tests %<>% #
	roundpValues
setwd('/Users/KSauby/Documents/Projects')
setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
