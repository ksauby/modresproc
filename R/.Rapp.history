26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
setwd('/Users/KSauby/Documents/Projects/marsico-time-series')
library(ProjectTemplate)#
#setwd("/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series")#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
rmarkdown::render('Appendix4_RGR_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.test = #
	RGR.humifusa.random.effects.models.covariance.parameters.test#
convergence.status = #
	RGR.humifusa.random.effects.models.convergence.status#
covariance.parms.estimates = #
	RGR.humifusa.random.effects.models.covariance.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.random.effects.models.conditional.fit.statistics#
fit.statistics = #
	RGR.humifusa.random.effects.models.fit.statistics#
parms.estimates = #
	RGR.humifusa.random.effects.models.parameter.estimates#
#
humifusa.size.model.results = randeffects_model_results_function(#
	covariance.parms.test, #
	convergence.status, #
	covariance.parms.estimates, #
	conditional.fit.statistics, #
	fit.statistics,#
	parms.estimates#
)#
humifusa.size.converg.status = #
	randeffects_converg_status_function(modelresults=humifusa.size.model.results)#
humifusa.size.covar.results = #
	randeffects_G_side_effects_test_function(humifusa.size.model.results)#
humifusa.size.covar.parms = #
	randeffects_covar_parms_estimates_function(humifusa.size.model.results)#
humifusa.size.rand.model.selection = #
	randeffects_model_selection_function(modelresults=humifusa.size.model.results)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics#
#
select_list = c(#
	"Intercept",#
	"C_t",#
	"Native Bug",#
	"Native Scale",#
	"Native Moth",#
	"Native Insects",#
	"P",#
	"T", #
	"P x T",#
	"Insect x Weather",#
	"Location (Year)",#
	"PlantID",#
	"pdG",#
	"Number of Parameters",#
	"delta cAIC",#
	"Prob(Model)"#
)#
modelselection_size_results = createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns %>%#
	addInsectWeatherCol %>%#
	processColumnNames %>%#
	processT1P1ColumnNames %>%#
	as.data.table %>%#
	setnames("Location(Year) ", "Location (Year)") %>%#
	setnames("Intercept PlantID", "PlantID") %>%#
	as.data.frame %>%#
	.[, select_list] %>%#
	round_df(2)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
modelselection_size_results = createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
modelselection_size_results = createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns %>%#
	addInsectWeatherCol %>%#
	processColumnNames %>%#
	processT1P1ColumnNames %>%#
	as.data.table
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parameter.estimates = covariance.parms.estimates
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
# to verify that all models have the same covariance parameters included#
	if ("Subject" %in% names(covariance.parameter.estimates)) {#
		covariance.parameter.estimates %<>% #
			mutate(CovParm = paste(CovParm, Subject)) %>%#
			dcast(modelVars~CovParm, value.var="Estimate")#
	} else {#
		covariance.parameter.estimates %<>% #
			mutate(CovParm = paste(CovParm)) %>%#
			dcast(modelVars~CovParm, value.var="Estimate")#
	}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
conditional.fit.statistics %<>% #
		convertShorttoLong %>%#
		.[, -3]#
	models.dimensions %<>%#
		convertShorttoLong %>%#
		select(modelVars, `Columns in X`, starts_with("Columns in Z"))#
	y <- parameter.estimates %>% constructConfInt
y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
if ("CA_t_1" 		%in% y$Effect) {y %<>% filter(CA_t_1!=0)}#
	if ("CH_t_1" 		%in% y$Effect) {y %<>% filter(CH_t_1!=0)}#
	if ("DA_t_1" 		%in% y$Effect) {y %<>% filter(DA_t_1!=0)}#
	if ("ME_t_1" 		%in% y$Effect) {y %<>% filter(ME_t_1!=0)}#
	if ("NatInsect_t_1" %in% y$Effect) {#
		y %<>% filter(is.na(NatInsect_t_1) | NatInsect_t_1==1)#
	}
y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
y <- parameter.estimates %>% constructConfInt
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
y$Effect
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
if ("CA_t_1" 		%in% y$Effect) {y %<>% filter(CA_t_1!=0)}
y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
y <- parameter.estimates %>% constructConfInt
dim(y)
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
if ("CA_t_1" 		%in% y$Effect) {y %<>% filter(CA_t_1!=0)}
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
dim(y)
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
if ("CH_t_1" 		%in% y$Effect) {y %<>% filter(CH_t_1!=0)}
dim(y)
y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
y <- parameter.estimates %>% constructConfInt#
	if ("CA_t_1" 		%in% y$Effect) {y %<>% filter(CA_t_1!=0)}#
	if ("CH_t_1" 		%in% y$Effect) {y %<>% filter(CH_t_1!=0)}#
	if ("DA_t_1" 		%in% y$Effect) {y %<>% filter(DA_t_1!=0)}#
	if ("ME_t_1" 		%in% y$Effect) {y %<>% filter(ME_t_1!=0)}#
	if ("NatInsect_t_1" %in% y$Effect) {#
		y %<>% filter(is.na(NatInsect_t_1) | NatInsect_t_1!=0)#
	}
y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
y %<>% dcast(modelVars~Effect, value.var="Estimate.CF") %>%#
		# fit statistics#
		merge(conditional.fit.statistics) %>%#
		merge(models.dimensions) %>%#
		merge(covariance.parameter.estimates) %>%#
		merge(convergence.status %>% select(modelVars, pdG))
y
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics#
#
select_list = c(#
	"Intercept",#
	"C_t",#
	"Native Bug",#
	"Native Scale",#
	"Native Moth",#
	"Native Insects",#
	"P",#
	"T", #
	"P x T",#
	"Insect x Weather",#
	"Location (Year)",#
	"PlantID",#
	"pdG",#
	"Number of Parameters",#
	"delta cAIC",#
	"Prob(Model)"#
)#
modelselection_size_results = createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns %>%#
	addInsectWeatherCol %>%#
	processColumnNames %>%#
	processT1P1ColumnNames %>%#
	as.data.table %>%#
	setnames("Location(Year) ", "Location (Year)") %>%#
	setnames("Intercept PlantID", "PlantID") %>%#
	as.data.frame %>%#
	.[, select_list] %>%#
	round_df(2)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics#
#
select_list = c(#
	"Intercept",#
	"C_t",#
	"Native Bug",#
	"Native Scale",#
	"Native Moth",#
	"Native Insects",#
	"P",#
	"T", #
	"P x T",#
	"Insect x Weather",#
	"Location (Year)",#
	"PlantID",#
	"pdG",#
	"Number of Parameters",#
	"delta cAIC",#
	"Prob(Model)"#
)#
modelselection_size_results = createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns
y
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics#
#
select_list = c(#
	"Intercept",#
	"C_t",#
	"Native Bug",#
	"Native Scale",#
	"Native Moth",#
	"Native Insects",#
	"P",#
	"T", #
	"P x T",#
	"Insect x Weather",#
	"Location (Year)",#
	"PlantID",#
	"pdG",#
	"Number of Parameters",#
	"delta cAIC",#
	"Prob(Model)"#
)#
modelselection_size_results = createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns %>%#
	addInsectWeatherCol %>%#
	processColumnNames %>%#
	processT1P1ColumnNames %>%#
	as.data.table
y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
covariance.parameter.estimates
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.test = #
	RGR.humifusa.random.effects.models.covariance.parameters.test#
convergence.status = #
	RGR.humifusa.random.effects.models.convergence.status#
covariance.parms.estimates = #
	RGR.humifusa.random.effects.models.covariance.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.random.effects.models.conditional.fit.statistics#
fit.statistics = #
	RGR.humifusa.random.effects.models.fit.statistics#
parms.estimates = #
	RGR.humifusa.random.effects.models.parameter.estimates#
#
humifusa.size.model.results = randeffects_model_results_function(#
	covariance.parms.test, #
	convergence.status, #
	covariance.parms.estimates, #
	conditional.fit.statistics, #
	fit.statistics,#
	parms.estimates#
)#
humifusa.size.converg.status = #
	randeffects_converg_status_function(modelresults=humifusa.size.model.results)#
humifusa.size.covar.results = #
	randeffects_G_side_effects_test_function(humifusa.size.model.results)#
humifusa.size.covar.parms = #
	randeffects_covar_parms_estimates_function(humifusa.size.model.results)#
humifusa.size.rand.model.selection = #
	randeffects_model_selection_function(modelresults=humifusa.size.model.results)#
```#
```{r include=FALSE}#
#
# MODEL SELECTION#
#
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics#
#
select_list = c(#
	"Intercept",#
	"C_t",#
	"Native Bug",#
	"Native Scale",#
	"Native Moth",#
	"Native Insects",#
	"P",#
	"T", #
	"P x T",#
	"Insect x Weather",#
	"Location (Year)",#
	"PlantID",#
	"pdG",#
	"Number of Parameters",#
	"delta cAIC",#
	"Prob(Model)"#
)
setwd('/Users/KSauby/Documents/Projects')
setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install(upgrade_dependencies=F)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.test = #
	RGR.humifusa.random.effects.models.covariance.parameters.test#
convergence.status = #
	RGR.humifusa.random.effects.models.convergence.status#
covariance.parms.estimates = #
	RGR.humifusa.random.effects.models.covariance.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.random.effects.models.conditional.fit.statistics#
fit.statistics = #
	RGR.humifusa.random.effects.models.fit.statistics#
parms.estimates = #
	RGR.humifusa.random.effects.models.parameter.estimates#
#
humifusa.size.model.results = randeffects_model_results_function(#
	covariance.parms.test, #
	convergence.status, #
	covariance.parms.estimates, #
	conditional.fit.statistics, #
	fit.statistics,#
	parms.estimates#
)#
humifusa.size.converg.status = #
	randeffects_converg_status_function(modelresults=humifusa.size.model.results)#
humifusa.size.covar.results = #
	randeffects_G_side_effects_test_function(humifusa.size.model.results)#
humifusa.size.covar.parms = #
	randeffects_covar_parms_estimates_function(humifusa.size.model.results)#
humifusa.size.rand.model.selection = #
	randeffects_model_selection_function(modelresults=humifusa.size.model.results)#
```#
```{r include=FALSE}#
#
# MODEL SELECTION#
#
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics#
#
select_list = c(#
	"Intercept",#
	"C_t",#
	"Native Bug",#
	"Native Scale",#
	"Native Moth",#
	"Native Insects",#
	"P",#
	"T", #
	"P x T",#
	"Insect x Weather",#
	"Location (Year)",#
	"PlantID",#
	"pdG",#
	"Number of Parameters",#
	"delta cAIC",#
	"Prob(Model)"#
)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns %>%#
	addInsectWeatherCol %>%#
	processColumnNames %>%#
	processT1P1ColumnNames %>%#
	as.data.table %>%#
	setnames("Location(Year) ", "Location (Year)") %>%#
	setnames("Intercept PlantID", "PlantID") %>%#
	as.data.frame %>%#
	.[, select_list] %>%#
	round_df(2)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns %>%#
	addInsectWeatherCol %>%#
	processColumnNames
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function %>%#
	addTempxPrecipColumns %>%#
	addInsectWeatherCol
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
) %>% #
	processWeatherVariables %>%#
	cAIC_function
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
models.dimensions
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parameter.estimates = covariance.parms.estimates
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
if ("Subject" %in% names(covariance.parameter.estimates)) {#
		covariance.parameter.estimates %<>% #
			mutate(CovParm = paste(CovParm, Subject)) %>%#
			dcast(modelVars~CovParm, value.var="Estimate")#
	} else {#
		covariance.parameter.estimates %<>% #
			mutate(CovParm = paste(CovParm)) %>%#
			dcast(modelVars~CovParm, value.var="Estimate")#
	}#
	# what is this code for?#
	# names(covariance.parameter.estimates) <- str_replace_all(names(covariance.parameter.estimates), fixed(" "), "")#
	conditional.fit.statistics %<>% #
		convertShorttoLong %>%#
		.[, -3]#
	models.dimensions %<>%#
		convertShorttoLong %>%#
		select(modelVars, `Columns in X`, starts_with("Columns in Z"))
models.dimensions
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
y <- parameter.estimates %>% constructConfInt#
	if ("CA_t_1" 		%in% y$Effect) {y %<>% filter(CA_t_1!=0)}#
	if ("CH_t_1" 		%in% y$Effect) {y %<>% filter(CH_t_1!=0)}#
	if ("DA_t_1" 		%in% y$Effect) {y %<>% filter(DA_t_1!=0)}#
	if ("ME_t_1" 		%in% y$Effect) {y %<>% filter(ME_t_1!=0)}#
	if ("NatInsect_t_1" %in% y$Effect) {#
		y %<>% filter(is.na(NatInsect_t_1) | NatInsect_t_1!=0)#
	}
y
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
y %<>% dcast(modelVars~Effect, value.var="Estimate.CF") %>%#
		# fit statistics#
		merge(conditional.fit.statistics) %>%#
		merge(models.dimensions) %>%#
		merge(covariance.parameter.estimates) %>%#
		merge(convergence.status %>% select(modelVars, pdG))
y
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
createModelSelectionTable(#
	covariance.parameter.estimates = covariance.parms.estimates, #
	models.dimensions = models.dimensions, #
	convergence.status = convergence.status, #
	parameter.estimates = parameter.estimates, #
	conditional.fit.statistics = conditional.fit.statistics#
)
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parms.estimates = 	RGR.humifusa.model.selection.models.covariance.parameter.estimates#
models.dimensions = #
	RGR.humifusa.model.selection.models.dimensions#
convergence.status = #
	RGR.humifusa.model.selection.models.convergence.status#
parameter.estimates = #
	RGR.humifusa.model.selection.models.parameter.estimates#
conditional.fit.statistics = #
	RGR.humifusa.model.selection.models.conditional.fit.statistics
setwd('/Users/KSauby/Documents/Projects/marsico-time-series/Manuscript/Appendix/RGR')
covariance.parameter.estimates = covariance.parms.estimates
setwd('/Users/KSauby/Documents/Projects/modresproc/R')
if ("Subject" %in% names(covariance.parameter.estimates)) {#
		covariance.parameter.estimates %<>% #
			mutate(CovParm = paste(CovParm, Subject)) %>%#
			dcast(modelVars~CovParm, value.var="Estimate")#
	} else {#
		covariance.parameter.estimates %<>% #
			mutate(CovParm = paste(CovParm)) %>%#
			dcast(modelVars~CovParm, value.var="Estimate")#
	}#
	# what is this code for?#
	# names(covariance.parameter.estimates) <- str_replace_all(names(covariance.parameter.estimates), fixed(" "), "")#
	conditional.fit.statistics %<>% #
		convertShorttoLong %>%#
		.[, -3]#
	models.dimensions %<>%#
		convertShorttoLong %>%#
		select(modelVars, `Columns in X`, starts_with("Columns in Z"))#
	y <- parameter.estimates %>% constructConfInt#
	if ("CA_t_1" 		%in% y$Effect) {y %<>% filter(CA_t_1!=0)}#
	if ("CH_t_1" 		%in% y$Effect) {y %<>% filter(CH_t_1!=0)}#
	if ("DA_t_1" 		%in% y$Effect) {y %<>% filter(DA_t_1!=0)}#
	if ("ME_t_1" 		%in% y$Effect) {y %<>% filter(ME_t_1!=0)}#
	if ("NatInsect_t_1" %in% y$Effect) {#
		y %<>% filter(is.na(NatInsect_t_1) | NatInsect_t_1!=0)#
	}#
	y %<>% dcast(modelVars~Effect, value.var="Estimate.CF") %>%#
		# fit statistics#
		merge(conditional.fit.statistics) %>%#
		merge(models.dimensions) %>%#
		merge(covariance.parameter.estimates) %>%#
		merge(convergence.status %>% select(modelVars, pdG))
y
